function Publish-KSADReport {
  # .SYNOPSIS
  #   Publish all scheduled AD reports.
  # .DESCRIPTION
  # .PARAMETER ReportName
  #   Publish a specific report. By default all enabled reports are published.
  # .PARAMETER Force
  #   Force publication of a report regardless of whether or not the report is enabled.
  # .PARAMETER Recipients
  #   Override the recipient list in the report definition.
  # .INPUTS
  # .OUTPUTS
  # 
  # .EXAMPLE
  # .NOTES
  #   Author: Chris Dent
  #   Team:   Core Technologies
  #
  #   Change log:
  #     02/07/2014 - Chris Dent - Added support for text-file comparison using calculated properties.
  #     01/07/2014 - Chris Dent - Added support for properties which are calculated on the fly.
  #     30/06/2014 - Chris Dent - First release.
  
  [CmdLetBinding(DefaultParameterSetName = 'ReportID')]
  param(
    [Parameter(Position = 1, ParameterSetName = 'ReportID')]
    [String]$ReportID,
    
    [Parameter(ValueFromPipeline = $true, ParameterSetName = 'Report')]
    [ValidateScript( { $_.PSObject.TypeNames -contains 'KScript.AD.Report' } )]
    $Report,
    
    [String[]]$Recipients,
    
    [String]$FileName,

    [Switch]$Force
  )

  begin {
    $Params = @{}; $psboundparameters.Keys | Where-Object { $_ -ne 'ReportID' } | ForEach-Object { $Params.Add($_, $psboundparameters[$_]) }
    if ($ReportID) {
      Get-KSADReport $ReportID | Publish-KSADReport @Params
    } elseif ($pscmdlet.ParameterSetName -ne 'Report') {
      Get-KSADReport | Publish-KSADReport @Params
    } else {
      $DebugInfo = @("Report run started: $(Get-Date)", "")

      # Start with a blank Excel file
      if ($FileName -and (Test-Path $FileName)) { Remove-Item $FileName }
      
      # Prepare the report summary for this result set
      $ReportSummary = @()
    }
  }

  process {
    if ($Report.Enabled -or ($Report -and $Force)) {
      Write-Verbose "Publish-KSADReport: $($Report.ID) is generating now"
      $DebugInfo += "ReportID: $($Report.ID) :: Time: $(Get-Date) User: $env:Username"
      
      if ($FileName) {
        $DebugInfo += "  FileName: $FileName"
      }
      
      # A counter to hold the number of results for this report
      $i = 0
      $SearchResults = Get-KSADObject -LdapFilter $Report.LdapFilter -Properties $Report.Properties.Keys -SizeLimit 0 | ForEach-Object {
        $ReportResultEntry = New-Object PSObject

        $SearchResult = $_

        # Add specified properties
        $DebugInfo += "  Properties:"
        $Report.Properties.Keys | ForEach-Object {
          $DebugInfo += "    $($Report.Properties[$_]): $_"
        
          Add-Member $Report.Properties[$_] -MemberType NoteProperty -Value $SearchResult.$_ -InputObject $ReportResultEntry -Force
        }

        # Add friendly properties associated with userAccountControl (properties and values are generated by Get-KSADObject)
        $DebugInfo += "  Automatic properties:"
        if ($Report.Properties.Contains('userAccountControl')) {
          $SearchResult.PSObject.Properties |
            Where-Object { $_.Name -like 'AccountIs*' -or $_.Name -like 'PasswordNever*' } |
            ForEach-Object {
              $DebugInfo += "    $($_.Name)"
            
              Add-Member $_.Name -MemberType NoteProperty -Value $_.Value -InputObject $ReportResultEntry
            }
        }
        
        # Add calculated properties
        $DebugInfo += "  Calculated properties:"
        if ($Report.CalculatedProperties) {
          $Report.CalculatedProperties.Keys | ForEach-Object {
            $CalculatedProperty = $Report.CalculatedProperties[$_]
            $TestValue = $ReportResultEntry.$($CalculatedProperty.CompareToPropertyName)

            $DebugInfo += "    $($_): $($CalculatedProperty.CompareToPropertyName) $($CalculatedProperty.Expression)"
            
            if ($CalculatedProperty.Type -eq 'Match') {
              if ($TestValue -match $CalculatedProperty.Expression) {
                if ($CalculatedProperty.ShowMatchGroups) {
                  $Value = "$($matches[1..($matches.Count - 1)])"
                } else {
                  $Value = $true
                }
              } else {
                if ($CalculatedProperty.ShowMatchGroups) {
                  $Value = $null
                } else {
                  $Value = $false
                }
              }
            }
          
            Add-Member $_ -MemberType NoteProperty -Value $Value -InputObject $ReportResultEntry -Force
          }
        }
        
        # Tag on objectGUID so this account can be traced in AD (even if the attribute has not been explicitly requested)
        if (-not ($Report.Properties.Contains('objectGUID'))) {
          Add-Member objectGUID -MemberType NoteProperty -Value $SearchResult.objectGUID -InputObject $ReportResultEntry
        }

        $ReportResultEntry; $i++
        
        Write-Verbose "Publish-KSADReport: $($Report.ID) Result count $i"
      }

      if ($SearchResults) {
        if ($FileName) {
          $SearchResults | Export-KSExcelWorksheet -FileName $FileName -WorksheetName $Report.ID
        } else {
          $SearchResults
        }
      }

      Write-Verbose "Publish-KSADReport: $($Report.ID) is complete. $i results."
      $DebugInfo += "  Completed at $(Get-Date). $i results."
      
      # Add the summary item for this report
      $ReportSummary += $Report | Select-Object ID, Description, Frequency, @{n='Count';e={ $i }}
    } elseif ($Report -and -not $Report.Enabled) {
      Write-Verbose "Publish-KSADReport: $($Report.ID) is not enabled."
    }
  }
  
  end {
    if ($ReportSummary -and $FileName) {
      $ReportSummary | Export-KSExcelWorksheet -FileName $FileName -WorksheetName "Summary" -MoveToStart
      
      if ($Recipients) {
        if ($IncludeDebug) { $PostContent = @{PostContent = ("<p>" + ($DebugInfo -join '<br />') + "</p>") } }
        $HtmlDocument = $ReportSummary | ConvertTo-Html -Head $HtmlHead -Title "AD report" -PreContent "<h1>AD reports for $(Get-Date)</h1>" @PostContent | Out-String
        
        Send-MailMessage -To $Recipients -From "adreports@kpmg.co.uk" -Subject "JML report: $(Get-Date)" -Attachments $FileName -Body $HtmlDocument -BodyAsHtml
      }
    }
  }
}