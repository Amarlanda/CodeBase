function Test-KSPoodleVulnerability {
  # .SYNOPSIS
  #   Test whether or not the server is vulnerable to the Poodle vulnerability.
  # .DESCRIPTION
  #   Test-KSPoodleVulnerability attempts to ascertain whether or not an asset is vulnerable to the Poodle vulnerability based on data gathered during an inventory update.
  # .PARAMETER ComputerName
  #   The name of an 
  # .INPUTS
  #   System.String
  # .OUTPUTS
  #   KScript.CMDB.PoodleVulnerabilityAssessment
  # .EXAMPLE
  #   Test-KSPoodleVulnerability SomeComputer
  # .NOTES
  #   Author: Chris Dent
  #   Team:   Core Technologies
  # 
  #   Change log:
  #     23/10/2014 - Chris Dent - First release.

  [CmdLetBinding()]
  param(
    [Parameter(ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
    [String]$ComputerName,
    
    $BoundPorts,
    
    $SupportedCiphers
  )

  process {
    $SupportedCiphers |
      Group-Object Port |
      ForEach-Object {
        $Port = $_.Name
        $InterfaceName = $_.Group[0].InterfaceName
      
        if ([IPAddress]::TryParse($Interface, [Ref]$null)) {
          $ServerProcess = $BoundPorts | Where-Object { $_.LocalAddress.Port -eq $Port -and $_.LocalAddress.Address.ToString() -eq $InterfaceName }
        } else {
          $ServerProcess = $BoundPorts | Where-Object { $_.LocalAddress.Port -eq $Port -and $_.LocalAddress.Address -eq [IPAddress]0 }
        }
      
        New-Object PSObject -Property ([Ordered]@{
          ComputerName             = $ComputerName
          Interface                = $InterfaceName
          SupportsSSLv3            = [Boolean]($_.Group | Where-Object { $_.Protocol -eq 'SSLv3' })
          HighestAvailableProtocol = ($_.Group.Protocol | Sort-Object -Descending | Select-Object -First 1)
          Port                     = $_.Name
          Service                  = $_.Group[0].Service
          Version                  = $_.Group[0].Version
          CertificateCommonName    = $_.Group[0].CertificateCommonName
          CertificateIssuer        = $_.Group[0].CertificateIssuer
          CertificateKeyType       = $_.Group[0].CertificateKeyType
          CertificateKeyLength     = $_.Group[0].CertificateKeyLength
          CertificateInception     = $_.Group[0].CertificateInception
          CertificateExpiration    = $_.Group[0].CertificateExpiration
          ServerProcess            = $(if ($ServerProcess) { "$($ServerProcess.Process) (PID: $($ServerProcess.ProcessID))" })
        })
      }
  }
}